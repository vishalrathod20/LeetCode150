/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class BSTIterator {
    // Stack to keep track of nodes for in-order traversal
    stack<TreeNode*> stk;

    // Helper function to push all leftmost nodes starting from the given node onto the stack
    void pushAll(TreeNode* node) {
        while (node != nullptr) {
            stk.push(node);      // Push the current node onto the stack
            node = node->left;  // Move to the left child
        }
    }

public:
    // Constructor to initialize the iterator and push all leftmost nodes from the root onto the stack
    BSTIterator(TreeNode* root) {
        pushAll(root);
    }
    
    // Function to return the next smallest number in the BST and update the stack
    int next() {
        TreeNode* node = stk.top();  // Get the node at the top of the stack
        stk.pop();  // Remove the node from the stack
        
        pushAll(node->right);  // Push all the leftmost nodes of the right child of the removed node
        
        return node->val;  // Return the value of the node
    }
    
    // Function to check if there are more nodes to visit in the BST
    bool hasNext() {
        return !stk.empty();  // Return true if the stack is not empty, meaning there are more nodes to visit
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */

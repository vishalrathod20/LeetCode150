/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int countNodes(TreeNode* root) {
        if(!root){
            return 0;
        }

        return 1+countNodes(root->left)+countNodes(root->right);
    }
};

Brute Force Approach O(n)
****************************************************************************************************************************************************************************************************************

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int getHeight(TreeNode* root){
         int height = 0;
        while (root) {
            height++;
            root = root->left;
        }
        return height;
    }
public:
    int countNodes(TreeNode* root) {
        if(!root){
            return 0;
        }

        int left_height = getHeight(root->left);
        int right_height = getHeight(root->right);

        if(left_height == right_height){
            return (1 << left_height)+countNodes(root->right);
        }
        else{
            return (1 << right_height)+countNodes(root->left);
        }
    }
};

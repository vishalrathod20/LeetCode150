/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(!head || !head->next || k==0) return head;

        //step1 calculate length 
        ListNode* temp = head;
        int length = 1;

        while(temp->next){
            temp  = temp->next;
            length++;
        }


        //step 2 connect the end to the head
        temp ->next = head;


        //step3 k ko adjust karenga 
        k = k%length;
        int stepToNewHead = length - k;

        //step 4 move the new head and break the circle 
        temp = head;
        for(int i = 1; i<stepToNewHead; i++){
            temp = temp->next;
        }

        head = temp->next;
        temp->next = NULL;

        return head;


    }
};

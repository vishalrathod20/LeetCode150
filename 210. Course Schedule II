class Solution {
private:
    bool dfs(int course, vector<vector<int>>& graph, vector<int>& visited, stack<int>& order) {
        if (visited[course] == 1) return false; // cycle detected
        if (visited[course] == 2) return true;  // already processed
        
        visited[course] = 1; // mark as visiting
        
        for (int neighbor : graph[course]) {
            if (!dfs(neighbor, graph, visited, order)) return false;
        }
        
        visited[course] = 2; // mark as visited
        order.push(course);
        return true;
    }
    
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        vector<vector<int>> graph(numCourses);
        vector<int> visited(numCourses, 0);
        stack<int> order;
        
        // Build graph
        for (const auto& pre : prerequisites) {
            graph[pre[1]].push_back(pre[0]);
        }
        
        // Process all nodes
        for (int i = 0; i < numCourses; ++i) {
            if (visited[i] == 0) {
                if (!dfs(i, graph, visited, order)) return vector<int>(); // cycle detected
            }
        }
        
        // Collect result
        vector<int> result;
        while (!order.empty()) {
            result.push_back(order.top());
            order.pop();
        }
        
        return result;
    }
};

class Solution {
public:
    // Function to count the number of live neighbors around cell (i, j)
    int liveNumberCount(vector<vector<int>>& board, int i, int j) {
        int row = board.size();    // Number of rows in the board
        int col = board[0].size(); // Number of columns in the board
        int livec = 0;             // Counter for live neighbors

        // Check horizontal neighbors
        if (j - 1 >= 0) { // Left neighbor
            if (board[i][j - 1] == 1 || board[i][j - 1] == 3) {
                livec++;
            }
        }
        if (j + 1 < col) { // Right neighbor
            if (board[i][j + 1] == 1 || board[i][j + 1] == 3) {
                livec++;
            }
        }

        // Check vertical neighbors
        if (i - 1 >= 0) { // Top neighbor
            if (board[i - 1][j] == 1 || board[i - 1][j] == 3) {
                livec++;
            }
        }
        if (i + 1 < row) { // Bottom neighbor
            if (board[i + 1][j] == 1 || board[i + 1][j] == 3) {
                livec++;
            }
        }

        // Check diagonal neighbors
        if (i - 1 >= 0 && j - 1 >= 0) { // Top-left neighbor
            if (board[i - 1][j - 1] == 1 || board[i - 1][j - 1] == 3) {
                livec++;
            }
        }

        if (i - 1 >= 0 && j + 1 < col) { // Top-right neighbor
            if (board[i - 1][j + 1] == 1 || board[i - 1][j + 1] == 3) {
                livec++;
            }
        }

        if (i + 1 < row && j - 1 >= 0) { // Bottom-left neighbor
            if (board[i + 1][j - 1] == 1 || board[i + 1][j - 1] == 3) {
                livec++;
            }
        }

        if (i + 1 < row && j + 1 < col) { // Bottom-right neighbor
            if (board[i + 1][j + 1] == 1 || board[i + 1][j + 1] == 3) {
                livec++;
            }
        }
        return livec; // Return the count of live neighbors
    }

    // Function to simulate the Game of Life
    void gameOfLife(vector<vector<int>>& board) {
        int row = board.size();    // Number of rows in the board
        int col = board[0].size(); // Number of columns in the board

        // Iterate over each cell in the board
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                int count = liveNumberCount(board, i, j); // Get the number of live neighbors

                // Check if the cell is currently dead (0)
                if (board[i][j] == 0) {
                    if (count == 3) {
                        board[i][j] = 2; // Mark as a cell that will become alive
                    }
                }
                // Check if the cell is currently alive (1)
                else if (board[i][j] == 1) {
                    if (count < 2 || count > 3) {
                        board[i][j] = 3; // Mark as a cell that will die
                    }
                }
            }
        }

        // Update the board with the new state
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (board[i][j] == 2) {
                    board[i][j] = 1; // Cell becomes alive
                }
                else if (board[i][j] == 3) {
                    board[i][j] = 0; // Cell dies
                }
            }
        }
    }
};
